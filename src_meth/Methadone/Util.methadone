/**
 *  Methadone.js
 *
 *  Copyright (c) 2010-2011 Andrew Stein & Benchmark Solutions
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

methadone(function() {

    Module: Methadone.Util = function() {

        Import: Methadone.State;

        this.getOrCreate = function(name) {
            var obj = window;
            name = name.split(".");
            for (var namespace in name) {
                if (name.hasOwnProperty(namespace)) {
                    obj[name[namespace]] = obj[name[namespace]] || {};
                    obj = obj[name[namespace]];
                }
            }
            return obj;
        }

        this.extend = function(target) {
            var args = Array.prototype.slice.call(arguments).slice(1);
            for (options in args) {
                if (args.hasOwnProperty(options)) {
                    options = args[options];
                    for (name in options) {
                        copy = options[ name ];
                        if (target !== copy && copy !== undefined) {
                            target[ name ] = copy;
                        }
                    }
                }
            }

            return target;
        }

        this.cache = function(args) {
            var obj = {};
            for (var i = 0; i < args.length; i ++) {
                obj[args[i]] = this.getOrCreate(args[i]);
            }
            return obj;
        }

        /**
         * Log an error and invalidate the application
         */
        this.logError = function(message) {
            console.error(message);
            Methadone.State.getInstance().errors.push(message);
            Methadone.State.getInstance().valid = false;
        }

        /**
         * Utility funciton to find all of the keys of an object
         * @param o
         */
        this.keys = function(o) {
            var result = [];
            for (var name in o) { if (o.hasOwnProperty(name)) result.push(name); }
            return result;
        }

        /**
         * Assigns an instance of an Object to a namespace.
         */
        this.assign = function(name, obj) {
            var namespaces = name.split(".");
            var ns         = namespaces[0];
            var nsparent   = window;

            if (namespaces.length > 1) {
                var temp = window[ns];
                for (var i = 1; i < namespaces.length; i ++) {
                    ns       = namespaces[i];
                    nsparent = temp;
                    temp     = temp[ns];
                }
            }

            nsparent[ns] = Methadone.Util.extend(obj, nsparent[ns]);
        }
    }

});