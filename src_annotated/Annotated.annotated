/**
 *  Annotated.js
 *
 *  Copyright (c) 2010-2011 Andrew Stein & Benchmark Solutions
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

annotated(function() {

    Strict: true;

    Module: Annotated = function() {

        Mixin:  Annotated.State;

        Import: var C = Annotated.Container;
        Import: var I = Annotated.Init;
        Import: var R = Annotated.Reflect;
        Import: var U = Annotated.Util;

        this.reset();

        var getState = this.getInstance
		var self = this;	

        Root: this.__scope__ = function(raw_code) {
			raw_code :String;
            var cache = undefined;
            if (getState().ir && getState().valid) {
                getState().valid = false;
                for (var i = 0; i < getState().ir.length; i ++) {
                    U.getOrCreate(getState().ir[i].name);
                }
            } else if (!getState().ir) {
                cache = U.cache(R.parseAnnotated(raw_code.toString()));
            }                        
            raw_code();
            if (!getState().ir) {
                for (var arg in cache) {
                    if (cache.hasOwnProperty(arg)) {
                        U.extend(U.getOrCreate(arg), cache[arg]);
                    }
                }
            }
            I.registerInitializer(self.initialize);
        };

        this.initialize = function() {
            if (!getState().initialized) {
                getState().initialized = true;
                if (!getState().ir) R.parseModules();
                C.loadModules();
            }
        };
    };

});