/**
 *  Annotated.js
 *
 *  Copyright (c) 2010-2011 Andrew Stein & Benchmark Solutions
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

annotated(function() {

    Module: Annotated.Reflect = function() {

        Import: Annotated.Reflect.Parse;
        Import: Annotated.State;
        Import: Annotated.Util;

        /**
         * Finds all of the dependencies for a set of modules
         */
        this.parseModules = function() {
            for (var module_name in Annotated.State.getInstance().modules) {
                if (Annotated.State.getInstance().modules.hasOwnProperty(module_name)) {
                    var current_module      = Annotated.State.getInstance().modules[module_name];

                    current_module.code     = Annotated.Reflect.Parse.clean(Annotated.Util.getOrCreate(module_name).toString());
                    current_module.raw_code = Annotated.Util.getOrCreate(module_name).toString();

                    var explicitModules     = Annotated.Reflect.Parse.findTaggedSymbols(current_module, "Import");
                    var mixinModules        = Annotated.Reflect.Parse.findTaggedSymbols(current_module, "Mixin");
                    var root                = Annotated.Reflect.Parse.findTaggedSymbols(current_module, "Root");
                                            
                    current_module.imports  = Annotated.Util.extend({}, explicitModules, mixinModules);
                    current_module.mixins   = mixinModules;
                    current_module.root     = Annotated.Util.keys(root)[0];
                                            
                    current_module.imports  = Annotated.Util.extend(current_module.imports, Annotated.Reflect.Parse.findImplicitModules(module_name, current_module.code));
                }
            }
        }

        /**
         * Parse the contents of an annotated call to a list of module descriptor structs
         */
        this.parseAnnotated = function(code) {
            code = Annotated.Reflect.Parse.clean(code);
            return Annotated.Reflect.Parse.findModules(code);
        }
    }

});