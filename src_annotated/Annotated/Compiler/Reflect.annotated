/**
 *  Annotated.js
 *
 *  Copyright (c) 2010-2011 Andrew Stein & Benchmark Solutions
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
annotated(function() {

    Module: Annotated.Compiler.Reflect = function() {

        Import: var P = Annotated.Compiler.Reflection.Parse;
        Import: var S = Annotated.Compiler.State;
        Import: var U = Annotated.Compiler.Util;

        /**
         * Finds all of the dependencies for a set of modules - runs after all
         * modules' metadata has been parsed.
         */
        this.parseModules = function() {
            var modules = S.getInstance().modules;
            for (var module_name in modules) {
                if (modules.hasOwnProperty(module_name)) {
                    var current_module      = modules[module_name];

                    current_module.code     = P.clean(U.getOrCreate(module_name).toString());
                    current_module.raw_code = U.getOrCreate(module_name).toString();

                    var explicitModules     = P.findTaggedSymbols(current_module, "Import");
                    var mixinModules        = P.findTaggedSymbols(current_module, "Mixin");
                    var root                = P.findTaggedSymbols(current_module, "Root");
                                            
                    current_module.imports  = U.extend({}, explicitModules, mixinModules);
                    current_module.mixins   = mixinModules;
                    current_module.root     = U.keys(root)[0];
                                            
                    current_module.imports  = U.extend(current_module.imports, P.findImplicitModules(module_name, current_module.code));

      				current_module.restrictions = P.findRestrictions(current_module);
                }
            }
        }

        /**
         * Parse the contents of an annotated call to a list of module descriptor structs.
         * This function runs before all modules have been declared
         */
        this.parseAnnotated = function(code) {
			code :String;
            
			return P.findModules(P.clean(code));
        }

        this.render = function(name) {
			name :String;
			
            var args   = Array.prototype.slice.call(arguments);
            var others = args.slice(1)
            var script = "";

            for (var i = 0; i < others.length; i ++) {
                var module_name = others[i];
                script += module_name.replace(".", "__") + "=new (function() {";
                module_instance = U.getOrCreate(module_name);
                for (var j in module_instance) {
                    if (module_instance.hasOwnProperty(j)) {
                        script += "this." + j + "=" + module_instance[j].toString() + ";";
                    }
                }
                script += "})();\n";
            }

            script = name + "=(function(){" + script + ";return " + args[args.length - 1] + "})();";
            for (i = 1; i < args.length; i ++) {
                script = script.replace(new RegExp(args[i], "gm"), args[i].replace(".", "__"));
            }
            return script;
        }
    }

});