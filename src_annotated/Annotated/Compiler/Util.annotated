/**
 *  Annotated.js
 *
 *  Copyright (c) 2010-2011 Andrew Stein & Benchmark Solutions
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

annotated(function() {

    Module: Annotated.Compiler.Util = function() {

        Import: var S = Annotated.Compiler.State;
        Import: var L = Annotated.Runtime;

        this.getOrCreate = L.getOrCreate;
        this.extend      = L.extend;
        this.assign      = L.assign;

        this.cache = function(args) {
            var obj = {};
            for (var i = 0; i < args.length; i ++) {
                obj[args[i]] = this.getOrCreate(args[i]);
            }
            return obj;
        }

        /**
         * Log an error and invalidate the application
         */
        this.logError = function(message) {
			message :String;
            console.error(message);
            S.getInstance().errors.push(message);
            S.getInstance().valid = false;
        }
        
        this.exists = function(name) {
            name :String;
            
            var conflict = "";
            var obj = window;

            name = name.split(".");
            for (var i = 0; i < name.length; i++) {
                var namespace = name[i];
                obj = obj[namespace];
                conflict += "." + namespace;
                if (obj === undefined) {
                    break;  
                } else if (typeof obj !== "object") {
                    return conflict.slice(1);
                }
            }
            return undefined;
        }

        /**
         * Utility funciton to find all of the keys of an object
         * @param o
         */
        this.keys = function(o) {
			o :Object;
            var result = [];
            for (var name in o) { if (o.hasOwnProperty(name)) result.push(name); }
            return result;
        }
    }

});