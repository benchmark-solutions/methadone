/**
 *  Annotated.js
 *
 *  Copyright (c) 2010-2011 Andrew Stein & Benchmark Solutions
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

annotated(function() {

    /**
     * This is a special class as it is designed to be serialized for compilation.
     * It shouldn't have dependencies, and should generall be as small as possible 
     */
    Module: Annotated.Runtime = function() {

        /**
         * Instantiate the module or class.  This includes creating
         * a fake constructor function to handle usage as a Mixin declaration.
         */
        this.initializeModule = function(current_module) {
			current_module :Object;
			
            var pending_mixins = [];
            var self = [];
            if (current_module.type === "Module") {
                self.push({});
                pending_mixins.push({});
                var _constructor = this.getOrCreate(current_module.name);
                this.processMixins(current_module, self, pending_mixins);
                _constructor.apply(self[self.length - 1]);
                this.checkForProperties(current_module);
                if (current_module.root) {
                    this.assign(current_module.name, this.extend(self[self.length - 1][current_module.root], self[self.length - 1]));
                } else {
                    this.assign(current_module.name, self[self.length - 1]);
                }
				this.addRestrictions(self[self.length - 1], current_module);
                self.pop();
                pending_mixins.pop();
            } else {
                var new_constructor = this.generateClassConstructor(current_module, this.getOrCreate(current_module.name), self, pending_mixins);
                this.assign(current_module.name, new_constructor);
            }
        }

        /**
         * Locally binds some vars for the scope of a constructor function;  this is where
         * dispatch happens which switches functionality of this function between
         * Mixin declaration and constructor.
         */
        this.generateClassConstructor = function(_module, _constructor, self, pending_mixins) {
			_module        :Object;
			_constructor   :Function;
			self           :Array;
			pending_mixins :Array;
           
 			var __this = this;
            return function() {
                if (pending_mixins.length > 0 && pending_mixins[pending_mixins.length - 1][_module.name]) {
                    self.push(self[self.length - 1]);
                    delete(pending_mixins[pending_mixins.length - 1][_module.name]);
                } else {
                    self.push(this);
                }

                pending_mixins.push({});
                __this.processMixins(_module, self, pending_mixins);

                var args = Array.prototype.slice.call(arguments);
				__this.checkRestrictions(_module, args);

                _constructor.apply(self[self.length - 1], args);
                __this.checkForProperties(_module);
			    __this.addRestrictions(self[self.length - 1], _module);

                pending_mixins.pop();
                return self.pop();
            }
        }

        /**
         * Instantiate and collect the classes for a mixin and attach them to the
         * object at the top of the stack.
         */
        this.processMixins = function(_module, self, pending_mixins) {
			_module        :Object;
			self           :Array;
			pending_mixins :Array;

            for (var mixin_name in _module.mixins) {
                if (_module.mixins[mixin_name] === "MODULE") {
                    this.extend(self[self.length - 1], this.getOrCreate(mixin_name));
                } else if (_module.mixins[mixin_name] === "INSTANCE") {
                    pending_mixins[pending_mixins.length - 1][mixin_name] = true;
                } else {
                    var obj = this.getOrCreate(mixin_name);
                    this.extend(self[self.length - 1], new obj());
                }
            }
        }

        /**
         * Assigns an instance of an Object to a namespace.
         */
        this.assign = function(name, obj) {
			name :String;
			
            var namespaces = name.split(".");
            var ns         = namespaces[0];
            var nsparent   = window;

            if (namespaces.length > 1) {
                var temp = window[ns];
                for (var i = 1; i < namespaces.length; i ++) {
                    ns       = namespaces[i];
                    nsparent = temp;
                    temp     = temp[ns];
                }
            }

            nsparent[ns] = this.extend(obj, nsparent[ns]);
        }

        /**
         * Modules may not have exposed properties in this version.
         */
        this.checkForProperties = function(module) {
			module :Object;
			var obj = this.getOrCreate(module.name);	
            for (var prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                    if (typeof obj[prop] !== "function" && typeof obj[prop] !== "undefined" && typeof obj[prop] !== "object") {
                        throw new Error("Module " + module.name + " has illegal public property " + prop);
                    }
                }
            }
        }

       this.checkRestrictions = function(module, args) {
			module :Object;
			args   :Array;
			
			var obj = this.getOrCreate(module.name);	
			var argNum = 0;
			for (var prop in module.restrictions) {
                if (module.restrictions.hasOwnProperty(prop)) {
					if (module.restrictions[prop] !== "None" && typeof args[argNum] !== module.restrictions[prop]) {
						throw Error("Module " + module.name + " type error; " 
							+ prop + "::" + module.restrictions[prop] + " invoked with " + args[argNum] + "::" + (typeof args[argNum]));
					}
                }
            }
        }

		this.addRestrictions = function(obj, module) {
			obj    :Object;
			module :Object;
			
			for (var prop in obj) {
				if (obj.hasOwnProperty(prop)) {
					if (typeof obj[prop] === "function" && prop[0] !== prop[0].toUpperCase()) {      // TODO Holy WTF, Batman!  This can come out when we make runtime refactor
						var restrictions = this.findRestrictions(this.clean(obj[prop].toString()));
						var old_fn = obj[prop];
						obj[prop] = this.typeFn(restrictions, prop, obj, obj[prop]);
						this.extend(obj[prop], old_fn);
					}
				}
			}
		}
		
		this.typeFn = function(restrictions, prop, obj, old) {
			restrictions :Object;
			prop         :String;
			obj          :Object;
			old          :Function;
		
			var __annotated_type_check__ = function() {
    		    var args = Array.prototype.slice.call(arguments);
				var argNum = 0;
				for (var rest in restrictions) {
					if (restrictions[rest] === "array") {
						if (!(args[argNum] instanceof Array)) {
							throw Error("Type Error; " + args[argNum] + " is not a " + restrictions[rest]);
						}
					} else if ((args[argNum] instanceof Array) && restrictions[rest] !== "None") {
						throw Error("Type Error; " + args[argNum] + "(Array) is not a " + restrictions[rest] + " in method " + prop);
					} else if (restrictions[rest] !== "None" && typeof args[argNum] !== restrictions[rest]) {
						throw Error("Type Error; " + args[argNum] + " is not a " + restrictions[rest]);
					}
					argNum ++;
				}
				return old.apply(this, args);
			}
			__annotated_type_check__.toString = function() { return old.toString() };
			return __annotated_type_check__;
		}

        this.findParams = function(code) {
			code :String;
            var params = new RegExp("\\((.*?)\\)", "gm").exec(code)[1].split(",");
            for (var i = 0; i < params.length; i ++) {
                params[i] = params[i].trim();
                if (params[i] === "") return [];
            }
            return params;
        }

        this.findRestrictions = function(code) {
	        code :String;
			var reserved = {
				"Import" : true,
				"Mixin" : true
			}
            params = this.findParams(code);
            var code = code.split("{")[1].split(/(;)/gm) // TODO $ makes firefox fail - weird;
			var restrictions  = {};
			var isRestriction = true;
			for (var param in params) {
            	restrictions[params[param]] = "None";
			}
			for (var i = 0; (i < code.length) && isRestriction; i += 2) {
                isRestriction = false;
                var line = code[i].split(":");
                for (var param in params) {
	                if (line[0].trim() != "") {
                        if (params[param] === line[0].trim()) {
                            restrictions[line[0].trim()] = line[1].replace(";", "").toLowerCase().trim(); 
							isRestriction = true;
						} else if (reserved[line[0].trim()]) {
							isRestriction  = true;
						}
                   	} else {
						isRestriction = true;
					}
                }
            }
			return restrictions;
        }

		/**
		 * Takes a string of valid Javascript and removes comments, 
		 * strings and regex literals, leaving only valid Javascript 
		 * tokens & symbols.
		 */
        this.clean = function(code) {
			code :String;
			
            var quote_regex = new RegExp("(\\/\\/|\\/\\*|\\\\\"|\\\\\'|[\\(,=^;]\\s*?/(?!/)|\\/|/)|['\"]", "gm");
            var in_quotes = false;
            var last_quote = "";
            var quote_index = null;
            var strings = [];

            while (quote = quote_regex.exec(code)) {
                if ((quote[0] === '\\"' || quote[0] === "\\'" || quote[0] === "\\/" ) && in_quotes) {
                } else if (quote[0] === last_quote && in_quotes) {
                    last_quote = "";
                    in_quotes = false;
                    strings.push([quote_index, quote_regex.lastIndex]);
                } else if (quote[0][quote[0].length - 1] === "/" && last_quote === "/") {
                    last_quote = "";
                    in_quotes = false;
                    strings.push([quote_index, quote_regex.lastIndex]);
                } else if (quote[0] === "//" && !in_quotes) {
                    var endLine = /$/gm;
                    endLine.lastIndex = quote_regex.lastIndex;
                    endLine.exec(code);
                    strings.push([quote_regex.lastIndex - 1, endLine.lastIndex]);
                    quote_regex.lastIndex = endLine.lastIndex;
                } else if (quote[0] === "/*" && !in_quotes) {
                    var endComment = /\*\//gm;
                    endComment.lastIndex = quote_regex.lastIndex;
                    endComment.exec(code);
                    strings.push([quote_regex.lastIndex, endComment.lastIndex]);
                    quote_regex.lastIndex = endComment.lastIndex;
                } else if (quote[0][quote[0].length - 1] === "/" && !in_quotes) {
                    last_quote = "/";
                    in_quotes = true;
                    quote_index = quote_regex.lastIndex;
                } else if (in_quotes) {
                } else if (quote[0] === "'" || quote[0] === '"') {
                    last_quote = quote[0];
                    in_quotes = true;
                    quote_index = quote_regex.lastIndex;
                }
            }

            strings = strings.reverse();

            for (var i in strings) {
                if (strings.hasOwnProperty(i)) {
                    code = code.slice(0, strings[i][0] - 1) + code.slice(strings[i][1], code.length);
                }
            }

            return code;
        }

		/** 
		 * Given a namespace name, returns the actual Object it represents,
		 * or instantiates an empty object.
		 */
        this.getOrCreate = function(name) {
			name :String;
		
            var obj = window;
            name = name.split(".");
            for (var i = 0; i < name.length; i++) {
                var namespace = name[i];
                obj[namespace] = obj[namespace] || {};
                obj = obj[namespace];
            }
            return obj;
        }

		/** 
		 * 'Merge' two Objects into one.
		 */
        this.extend = function(target) {
            var args = Array.prototype.slice.call(arguments).slice(1);
            for (var i = 0; i < args.length; i++) {
                var options = args[i];
                for (name in options) {
                    copy = options[ name ];
                    if (target !== copy && copy !== undefined) {
                        if (target[name]) {

                        } else {
                            target[ name ] = copy;
                        }
                    }
                }
            }

            return target;
        }

		/**
		 * Given a Module metadata Object & its initialization code,
		 * initializes a module or class.
		 */
        this.load = function(current_module, code) {
			current_module :Object;
			code           :String;
			
			window["Boolean"] = window["Boolean"] || {};
			if(typeof String.prototype.trim !== 'function') {
              String.prototype.trim = function() {
                return this.replace(/^\s+|\s+$/g, ''); 
              }
            }

    		
			this.getOrCreate(current_module.name);
            this.assign(current_module.name, code);
            this.initializeModule(current_module) + ");\n";;
        }
    }

});

