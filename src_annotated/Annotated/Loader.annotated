/**
 *  Annotated.js
 *
 *  Copyright (c) 2010-2011 Andrew Stein & Benchmark Solutions
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

annotated(function() {

    Module: Annotated.Loader = function() {

        /**
         * Instantiate the module or class.  This includes creating
         * a fake constructor function to handle usage as a Mixin declaration.
         */
        this.initializeModule = function(current_module) {
            var pending_mixins = [];
            var self = [];
            if (current_module.type === "Module") {
                self.push({});
                pending_mixins.push({});
                var _constructor = this.getOrCreate(current_module.name);
                this.processMixins(current_module, self, pending_mixins);
                _constructor.apply(self[self.length - 1]);
                this.checkForProperties(self[self.length - 1], current_module.name);
                if (current_module.root) {
                    this.assign(current_module.name, this.extend(self[self.length - 1][current_module.root], self[self.length - 1]));
                } else {
                    this.assign(current_module.name, self[self.length - 1]);
                }
                self.pop();
                pending_mixins.pop();
            } else {
                var new_constructor = this.generateClassConstructor(current_module, this.getOrCreate(current_module.name), self, pending_mixins);
                this.assign(current_module.name, new_constructor);
            }
        }

        /**
         * Modules may not have exposed properties in this version.
         */
        this.checkForProperties = function(obj, name) {
            for (var prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                    if (typeof obj[prop] !== "function" && typeof obj[prop] !== "undefined") {
                        this.logError("Module " + name + " has illegal public property " + prop);
                    }
                }
            }
        }

        /**
         * Locally binds some vars for the scope of a constructor function;  this is where
         * dispatch happens which switches functionality of this function between
         * Mixin declaration and constructor.
         */
        this.generateClassConstructor = function(_module, _constructor, self, pending_mixins) {
            var __this = this;
            return function() {
                if (pending_mixins.length > 0 && pending_mixins[pending_mixins.length - 1][_module.name]) {
                    self.push(self[self.length - 1]);
                    delete(pending_mixins[pending_mixins.length - 1][_module.name]);
                } else {
                    self.push(this);
                }

                pending_mixins.push({});
                __this.processMixins(_module, self, pending_mixins);

                var args = Array.prototype.slice.call(arguments);
                _constructor.apply(self[self.length - 1], args);
                pending_mixins.pop();
                return self.pop();
            }
        }

        /**
         * Instantiate and collect the classes for a mixin and attach them to the
         * object at the top of the stack.
         */
        this.processMixins = function(_module, self, pending_mixins) {
            for (var mixin_name in _module.mixins) {
                if (_module.mixins[mixin_name] === "MODULE") {
                    this.extend(self[self.length - 1], this.getOrCreate(mixin_name));
                } else if (_module.mixins[mixin_name] === "INSTANCE") {
                    pending_mixins[pending_mixins.length - 1][mixin_name] = true;
                } else {
                    var obj = this.getOrCreate(mixin_name);
                    this.extend(self[self.length - 1], new obj());
                }
            }
        }

        /**
         * Assigns an instance of an Object to a namespace.
         */
        this.assign = function(name, obj) {
            var namespaces = name.split(".");
            var ns         = namespaces[0];
            var nsparent   = window;

            if (namespaces.length > 1) {
                var temp = window[ns];
                for (var i = 1; i < namespaces.length; i ++) {
                    ns       = namespaces[i];
                    nsparent = temp;
                    temp     = temp[ns];
                }
            }

            nsparent[ns] = this.extend(obj, nsparent[ns]);
        }

        this.getOrCreate = function(name) {
            var obj = window;
            name = name.split(".");
            for (var namespace in name) {
                if (name.hasOwnProperty(namespace)) {
                    obj[name[namespace]] = obj[name[namespace]] || {};
                    obj = obj[name[namespace]];
                }
            }
            return obj;
        }

        this.extend = function(target) {
            var args = Array.prototype.slice.call(arguments).slice(1);
            for (options in args) {
                if (args.hasOwnProperty(options)) {
                    options = args[options];
                    for (name in options) {
                        copy = options[ name ];
                        if (target !== copy && copy !== undefined) {
                            target[ name ] = copy;
                        }
                    }
                }
            }

            return target;
        }

    }

});

