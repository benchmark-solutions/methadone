/**
 *  Annotated.js
 *
 *  Copyright (c) 2010-2011 Andrew Stein & Benchmark Solutions
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

annotated(function() {

    Module: Annotated.Container = function() {

        Import: Annotated.State;
        Import: Annotated.Util;
        Import: Annotated.Loader;

        /**
         * Loads all modules registered so far by iterating over the module
         * list and initializing the ones whose depenencies have been
         * initialized.
         */
        this.loadModules = function() {

            var running = true;
            var last_size = 0;
            var size = 0;
            var initialized = {};

            var order = [];
            if (Annotated.State.getInstance().compile) {
                Annotated.State.getInstance().script += Annotated.Reflect.render("__m", "Annotated.Loader");
            }

            if (Annotated.State.getInstance().ir) {
                Annotated.State.getInstance().ir = Annotated.State.getInstance().ir.reverse();
                while (Annotated.State.getInstance().ir.length > 0) {
                    Annotated.Loader.initializeModule(Annotated.State.getInstance().ir.pop());
                }
            } else {
                while (running && Annotated.State.getInstance().valid) {
                    for (var module_name in Annotated.State.getInstance().modules) {
                        if (Annotated.State.getInstance().modules.hasOwnProperty(module_name)) {
                            var current_module = Annotated.State.getInstance().modules[module_name];
                            if (!initialized[current_module.name]) {
                                var deps_satisfied = true;

                                for (var import_name in current_module.imports) {
                                    if (current_module.imports.hasOwnProperty(import_name)) {
                                        if (!initialized[import_name]) deps_satisfied = false;
                                    }
                                }
                                
                                if (deps_satisfied) {
                                    if (Annotated.State.getInstance().preprocess) {
                                        order.push({
                                            name:   current_module.name,
                                            mixins: current_module.mixins,
                                            type:   current_module.type
                                        });
                                    } else if (Annotated.State.getInstance().compile) {
                                        Annotated.State.getInstance().script += "__m.load(" 
                                            + JSON.stringify({
                                                name:     current_module.name,
                                                mixins:   current_module.mixins,
                                                type:     current_module.type,
                                                root:     current_module.root 
                                            }) + "," + current_module.raw_code +  ");\n";
                                    } else {
                                        Annotated.Loader.initializeModule(current_module);
                                        this.checkForProperties(Annotated.Util.getOrCreate(current_module.name), current_module.name);
                                    }
                                    delete(Annotated.State.getInstance().uninitialized[current_module.name]);
                                    initialized[current_module.name] = true;
                                    size ++;
                                }
                            }
                        }
                    }

                    if (last_size === size) {
                        var xxx = 0;
                        for (var k in Annotated.State.getInstance().uninitialized) xxx ++;
                        if (xxx > 0) Annotated.Util.logError("Dependencies are unsatisfiable for " + JSON.stringify(Annotated.Util.keys(Annotated.State.getInstance().uninitialized)) + "; not loaded");
                        running = false;
                    }

                    last_size = size;
                }

                if (Annotated.State.getInstance().preprocess) {
                    Annotated.State.getInstance().ir = "annotated.setIR(" + JSON.stringify(order) + ");";
                }
            }
        }

        /**
         * Modules may not have exposed properties in this version.
         */
        this.checkForProperties = function(obj, name) {
            for (var prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                    if (typeof obj[prop] !== "function" && typeof obj[prop] !== "undefined") {
                        this.logError("Module " + name + " has illegal public property " + prop);
                    }
                }
            }
        }
    }

});

